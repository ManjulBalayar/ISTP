{"dependencies": [{"name": "anyio", "version": "4.0.0", "vulns": []}, {"name": "appnope", "version": "0.1.3", "vulns": []}, {"name": "argon2-cffi", "version": "23.1.0", "vulns": []}, {"name": "argon2-cffi-bindings", "version": "21.2.0", "vulns": []}, {"name": "arrow", "version": "1.3.0", "vulns": []}, {"name": "asgiref", "version": "3.7.2", "vulns": []}, {"name": "asttokens", "version": "2.4.0", "vulns": []}, {"name": "async-lru", "version": "2.0.4", "vulns": []}, {"name": "attrs", "version": "23.1.0", "vulns": []}, {"name": "babel", "version": "2.13.0", "vulns": []}, {"name": "backcall", "version": "0.2.0", "vulns": []}, {"name": "beautifulsoup4", "version": "4.12.2", "vulns": []}, {"name": "bleach", "version": "6.1.0", "vulns": []}, {"name": "certifi", "version": "2023.7.22", "vulns": [{"id": "PYSEC-2024-230", "fix_versions": ["2024.7.4"], "aliases": ["CVE-2024-39689"], "description": "Certifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi starting in 2021.05.30 and prior to 2024.07.4 recognized root certificates from `GLOBALTRUST`. Certifi 2024.07.04 removes root certificates from `GLOBALTRUST` from the root store. These are in the process of being removed from Mozilla's trust store. `GLOBALTRUST`'s root certificates are being removed pursuant to an investigation which identified \"long-running and unresolved compliance issues.\""}]}, {"name": "cffi", "version": "1.16.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.3.0", "vulns": []}, {"name": "comm", "version": "0.1.4", "vulns": []}, {"name": "debugpy", "version": "1.8.0", "vulns": []}, {"name": "decorator", "version": "5.1.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "django", "version": "4.2.15", "vulns": [{"id": "PYSEC-2025-13", "fix_versions": ["4.2.20", "5.0.13", "5.1.7"], "aliases": ["CVE-2025-26699"], "description": "An issue was discovered in Django 5.1 before 5.1.7, 5.0 before 5.0.13, and 4.2 before 4.2.20. The django.utils.text.wrap() method and wordwrap template filter are subject to a potential denial-of-service attack when used with very long strings."}, {"id": "PYSEC-2024-102", "fix_versions": ["4.2.16", "5.0.9", "5.1.1"], "aliases": ["CVE-2024-45230"], "description": "An issue was discovered in Django 5.1 before 5.1.1, 5.0 before 5.0.9, and 4.2 before 4.2.16. The urlize() and urlizetrunc() template filters are subject to a potential denial-of-service attack via very large inputs with a specific sequence of characters."}, {"id": "PYSEC-2024-157", "fix_versions": ["4.2.17", "5.0.10", "5.1.4"], "aliases": ["CVE-2024-53908"], "description": "An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. Direct usage of the django.db.models.fields.json.HasKey lookup, when an Oracle database is used, is subject to SQL injection if untrusted data is used as an lhs value. (Applications that use the jsonfield.has_key lookup via __ are unaffected.)"}, {"id": "PYSEC-2024-156", "fix_versions": ["4.2.17", "5.0.10", "5.1.4"], "aliases": ["CVE-2024-53907"], "description": "An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. The strip_tags() method and striptags template filter are subject to a potential denial-of-service attack via certain inputs containing large sequences of nested incomplete HTML entities."}, {"id": "PYSEC-2025-1", "fix_versions": ["4.2.18", "5.0.11", "5.1.5"], "aliases": ["CVE-2024-56374"], "description": "An issue was discovered in Django 5.1 before 5.1.5, 5.0 before 5.0.11, and 4.2 before 4.2.18. Lack of upper-bound limit enforcement in strings passed when performing IPv6 validation could lead to a potential denial-of-service attack. The undocumented and private functions clean_ipv6_address and is_valid_ipv6_address are vulnerable, as is the django.forms.GenericIPAddressField form field. (The django.db.models.GenericIPAddressField model field is not affected.)"}, {"id": "GHSA-rrqc-c2jx-6jgv", "fix_versions": ["4.2.16", "5.0.9", "5.1.1"], "aliases": ["CVE-2024-45231"], "description": "An issue was discovered in Django v5.1.1, v5.0.9, and v4.2.16. The django.contrib.auth.forms.PasswordResetForm class, when used in a view implementing password reset flows, allows remote attackers to enumerate user e-mail addresses by sending password reset requests and observing the outcome (only when e-mail sending is consistently failing)."}]}, {"name": "django-ratelimit", "version": "4.1.0", "vulns": []}, {"name": "executing", "version": "2.0.0", "vulns": []}, {"name": "fastjsonschema", "version": "2.18.1", "vulns": []}, {"name": "fqdn", "version": "1.5.1", "vulns": []}, {"name": "idna", "version": "3.4", "vulns": [{"id": "PYSEC-2024-60", "fix_versions": ["3.7"], "aliases": ["CVE-2024-3651"], "description": "A vulnerability was identified in the kjd/idna library, specifically within the `idna.encode()` function, affecting version 3.6. The issue arises from the function's handling of crafted input strings, which can lead to quadratic complexity and consequently, a denial of service condition. This vulnerability is triggered by a crafted input that causes the `idna.encode()` function to process the input with considerable computational load, significantly increasing the processing time in a quadratic manner relative to the input size."}]}, {"name": "ipykernel", "version": "6.25.2", "vulns": []}, {"name": "ipython", "version": "8.16.1", "vulns": []}, {"name": "ipython-genutils", "version": "0.2.0", "vulns": []}, {"name": "ipywidgets", "version": "8.1.1", "vulns": []}, {"name": "isoduration", "version": "20.11.0", "vulns": []}, {"name": "jedi", "version": "0.19.1", "vulns": []}, {"name": "jinja2", "version": "3.1.2", "vulns": [{"id": "GHSA-h5c8-rqwp-cp95", "fix_versions": ["3.1.3"], "aliases": ["CVE-2024-22195"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing spaces. XML/HTML attributes cannot contain spaces, as each would then be interpreted as a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. Note that accepting keys as user input is not common or a particularly intended use case of the `xmlattr` filter, and an application doing so should already be verifying what keys are provided regardless of this fix."}, {"id": "GHSA-h75v-3vvj-5mfj", "fix_versions": ["3.1.4"], "aliases": ["CVE-2024-34064"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `>`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.  Accepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe."}, {"id": "GHSA-q2x7-8rv6-6q7h", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56326"], "description": "An oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to store a reference to a malicious string's `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox."}, {"id": "GHSA-gmj6-6f8f-6699", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56201"], "description": "A bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code, regardless of if Jinja's sandbox is used.  To exploit the vulnerability, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename."}, {"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "aliases": ["CVE-2025-27516"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "json5", "version": "0.9.14", "vulns": []}, {"name": "jsonpointer", "version": "2.4", "vulns": []}, {"name": "jsonschema", "version": "4.19.1", "vulns": []}, {"name": "jsonschema-specifications", "version": "2023.7.1", "vulns": []}, {"name": "jupyter", "version": "1.0.0", "vulns": []}, {"name": "jupyter-console", "version": "6.6.3", "vulns": []}, {"name": "jupyter-events", "version": "0.7.0", "vulns": []}, {"name": "jupyter-lsp", "version": "2.2.0", "vulns": [{"id": "GHSA-4qhp-652w-c22x", "fix_versions": ["2.2.2"], "aliases": ["CVE-2024-22415"], "description": "### Impact Installations of jupyter-lsp running in environments without configured file system access control (on the operating system level), and with jupyter-server instances exposed to non-trusted network are vulnerable to unauthorised access and modification of file system beyond the jupyter root directory.  ### Patches Version 2.2.2 has been patched.  ### Workarounds Users of jupyterlab who do not use jupyterlab-lsp can uninstall jupyter-lsp.  ### Credits We would like to credit Bary Levy, researcher of pillar.security research team, for the discovery and responsible disclosure of this vulnerability.  Edit: based on advice from pillar.security the Confidentiality/Integrity/Availability were increased to High to reflect potential for critical impact on publicly hosted jupyter-server instances lacking isolation of user privileges on operating system level (for best practices please consult https://jupyterhub.readthedocs.io/en/stable/explanation/websecurity.html#protect-users-from-each-other) and CWE-94 was added due to a potential vulnerability chaining in specific environments."}]}, {"name": "jupyter-client", "version": "8.4.0", "vulns": []}, {"name": "jupyter-core", "version": "5.4.0", "vulns": []}, {"name": "jupyter-server", "version": "2.7.3", "vulns": [{"id": "PYSEC-2023-272", "fix_versions": ["2.11.2"], "aliases": ["CVE-2023-49080", "GHSA-h56g-gq9v-vc8r"], "description": "The Jupyter Server provides the backend (i.e. the core services, APIs, and REST endpoints) for Jupyter web applications like Jupyter notebook, JupyterLab, and Voila. Unhandled errors in API requests coming from an authenticated user include traceback information, which can include path information. There is no known mechanism by which to trigger these errors without authentication, so the paths revealed are not considered particularly sensitive, given that the requesting user has arbitrary execution permissions already in the same environment. A fix has been introduced in commit `0056c3aa52` which no longer includes traceback information in JSON error responses. For compatibility, the traceback field is present, but always empty. This commit has been included in version 2.11.2. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"id": "PYSEC-2024-165", "fix_versions": ["2.14.1"], "aliases": ["CVE-2024-35178"], "description": "The Jupyter Server provides the backend for Jupyter web applications. Jupyter Server on Windows has a vulnerability that lets unauthenticated attackers leak the NTLMv2 password hash of the Windows user running the Jupyter server. An attacker can crack this password to gain access to the Windows machine hosting the Jupyter server, or access other network-accessible machines or 3rd party services using that credential. Or an attacker perform an NTLM relay attack without cracking the credential to gain access to other network-accessible machines. This vulnerability is fixed in 2.14.1."}]}, {"name": "jupyter-server-terminals", "version": "0.4.4", "vulns": []}, {"name": "jupyterlab", "version": "4.0.6", "vulns": [{"id": "GHSA-4m77-cmpx-vjc4", "fix_versions": ["4.0.11"], "aliases": ["CVE-2024-22420"], "description": "### Impact  The vulnerability depends on user interaction by opening a malicious notebook with Markdown cells, or Markdown file using JupyterLab preview feature.  A malicious user can access any data that the attacked user has access to as well as perform arbitrary requests acting as the attacked user.  ### Patches  JupyterLab v4.0.11 was patched.  ### Workarounds  Users can either disable the table of contents extension by running:  ```bash jupyter labextension disable @jupyterlab/toc-extension:registry ```  ### References  Vulnerability reported via the [bug bounty program](https://app.intigriti.com/programs/jupyter/jupyter/detail) [sponsored by the European Commission](https://commission.europa.eu/news/european-commissions-open-source-programme-office-starts-bug-bounties-2022-01-19_en) and hosted on the [Intigriti platform](https://www.intigriti.com/). "}, {"id": "GHSA-44cc-43rp-5947", "fix_versions": ["3.6.7", "4.0.11"], "aliases": ["CVE-2024-22421"], "description": "### Impact Users of JupyterLab who click on a malicious link may get their `Authorization` and `XSRFToken` tokens exposed to a third party when running an older `jupyter-server` version.  ### Patches JupyterLab 4.1.0b2, 4.0.11, and 3.6.7 were patched.  ### Workarounds No workaround has been identified, however users should ensure to upgrade `jupyter-server` to version 2.7.2 or newer which includes a redirect vulnerability fix.  ### References  Vulnerability reported by user @davwwwx via the [bug bounty program](https://app.intigriti.com/programs/jupyter/jupyter/detail) [sponsored by the European Commission](https://commission.europa.eu/news/european-commissions-open-source-programme-office-starts-bug-bounties-2022-01-19_en) and hosted on the [Intigriti platform](https://www.intigriti.com/). "}]}, {"name": "jupyterlab-pygments", "version": "0.2.2", "vulns": []}, {"name": "jupyterlab-widgets", "version": "3.0.9", "vulns": []}, {"name": "jupyterlab-server", "version": "2.25.0", "vulns": []}, {"name": "markupsafe", "version": "2.1.3", "vulns": []}, {"name": "matplotlib-inline", "version": "0.1.6", "vulns": []}, {"name": "mistune", "version": "3.0.2", "vulns": []}, {"name": "mysql", "version": "0.0.3", "vulns": []}, {"name": "mysqlclient", "version": "2.2.4", "vulns": []}, {"name": "nbclient", "version": "0.8.0", "vulns": []}, {"name": "nbconvert", "version": "7.9.2", "vulns": []}, {"name": "nbformat", "version": "5.9.2", "vulns": []}, {"name": "nest-asyncio", "version": "1.5.8", "vulns": []}, {"name": "notebook-shim", "version": "0.2.3", "vulns": []}, {"name": "numpy", "version": "1.26.0", "vulns": []}, {"name": "overrides", "version": "7.4.0", "vulns": []}, {"name": "packaging", "version": "23.2", "vulns": []}, {"name": "pandas", "version": "2.1.1", "vulns": []}, {"name": "pandocfilters", "version": "1.5.0", "vulns": []}, {"name": "parso", "version": "0.8.3", "vulns": []}, {"name": "pexpect", "version": "4.8.0", "vulns": []}, {"name": "pickleshare", "version": "0.7.5", "vulns": []}, {"name": "platformdirs", "version": "3.11.0", "vulns": []}, {"name": "prometheus-client", "version": "0.17.1", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.39", "vulns": []}, {"name": "psutil", "version": "5.9.5", "vulns": []}, {"name": "ptyprocess", "version": "0.7.0", "vulns": []}, {"name": "pure-eval", "version": "0.2.2", "vulns": []}, {"name": "pycparser", "version": "2.21", "vulns": []}, {"name": "pygments", "version": "2.16.1", "vulns": []}, {"name": "pymysql", "version": "1.1.1", "vulns": []}, {"name": "python-dateutil", "version": "2.8.2", "vulns": []}, {"name": "python-dotenv", "version": "1.1.0", "vulns": []}, {"name": "python-json-logger", "version": "2.0.7", "vulns": []}, {"name": "pytz", "version": "2023.3.post1", "vulns": []}, {"name": "pyyaml", "version": "6.0.1", "vulns": []}, {"name": "pyzmq", "version": "25.1.1", "vulns": []}, {"name": "qtconsole", "version": "5.4.4", "vulns": []}, {"name": "qtpy", "version": "2.4.0", "vulns": []}, {"name": "referencing", "version": "0.30.2", "vulns": []}, {"name": "requests", "version": "2.31.0", "vulns": [{"id": "GHSA-9wx4-h78v-vm56", "fix_versions": ["2.32.0"], "aliases": ["CVE-2024-35195"], "description": "When making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.  ### Remediation Any of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.  * Upgrade to `requests>=2.32.0`. * For `requests<2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session. * For `requests<2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.  ### Related Links * https://github.com/psf/requests/pull/6655"}]}, {"name": "rfc3339-validator", "version": "0.1.4", "vulns": []}, {"name": "rfc3986-validator", "version": "0.1.1", "vulns": []}, {"name": "rpds-py", "version": "0.10.6", "vulns": []}, {"name": "send2trash", "version": "1.8.2", "vulns": []}, {"name": "six", "version": "1.16.0", "vulns": []}, {"name": "sniffio", "version": "1.3.0", "vulns": []}, {"name": "soupsieve", "version": "2.5", "vulns": []}, {"name": "stack-data", "version": "0.6.3", "vulns": []}, {"name": "terminado", "version": "0.17.1", "vulns": []}, {"name": "tinycss2", "version": "1.2.1", "vulns": []}, {"name": "traitlets", "version": "5.11.2", "vulns": []}, {"name": "types-python-dateutil", "version": "2.8.19.14", "vulns": []}, {"name": "tzdata", "version": "2023.3", "vulns": []}, {"name": "uri-template", "version": "1.3.0", "vulns": []}, {"name": "urllib3", "version": "2.0.6", "vulns": [{"id": "PYSEC-2023-212", "fix_versions": ["1.26.18", "2.0.7"], "aliases": ["CVE-2023-45803", "GHSA-g4mx-q9vg-27p4"], "description": "urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body. "}, {"id": "GHSA-34jh-p97f-mpxf", "fix_versions": ["1.26.19", "2.2.2"], "aliases": ["CVE-2024-37891"], "description": "When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected.  However, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects.  Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident.  Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach.  ## Affected usages  We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:  * Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support. * Not disabling HTTP redirects. * Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin.  ## Remediation  * Using the `Proxy-Authorization` header with urllib3's `ProxyManager`. * Disabling HTTP redirects using `redirects=False` when sending requests. * Not using the `Proxy-Authorization` header."}]}, {"name": "wcwidth", "version": "0.2.8", "vulns": []}, {"name": "webcolors", "version": "1.13", "vulns": []}, {"name": "webencodings", "version": "0.5.1", "vulns": []}, {"name": "websocket-client", "version": "1.6.4", "vulns": []}, {"name": "widgetsnbextension", "version": "4.0.9", "vulns": []}, {"name": "notebook", "version": "7.0.8", "vulns": []}, {"name": "sqlparse", "version": "0.5.3", "vulns": []}, {"name": "tornado", "version": "6.4.2", "vulns": []}], "fixes": []}
